Question Link: https://leetcode.com/problems/minimize-malware-spread-ii/


// Approach :                                            
class Solution {
public:
    
    int find(vector<int> &parent, int u){
        if(parent[u]==u) return u;
            return parent[u]=find(parent,parent[u]);
    }
    
    void merge(vector<int> &parent, vector<int> &rk, int pu, int pv){
        if(rk[pu]>=rk[pv]){
            rk[pu]+=rk[pv];
            parent[pv]=pu;
        }else{
            rk[pv]+=rk[pu];
            parent[pu]=pv;
        }
    }
    
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n=graph.size();
        
        vector<int> parent(n), rk(n);
        for(int i=0;i<n;i++){
            parent[i]=i;
            rk[i]=1;
        }
        
        set<int> st;
        for(int i=0;i<initial.size();i++) st.insert(initial[i]);
        
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(graph[i][j]==1 && st.find(i)==st.end() && st.find(j)==st.end()){
                    int pu=find(parent,i), pv=find(parent,j);
                    if(pu!=pv) merge(parent,rk,pu,pv);
                }
            }
        }
        
        vector<int> freq(n,0); // unique parents in infected group
        
        map<int,set<int>> mp;
        for(int i=0;i<initial.size();i++){
            int pu=initial[i];
            for(int j=0;j<n;j++){
                if(graph[pu][j]==1 && pu!=j && st.find(j)==st.end()){
                    int pv=find(parent,j);
                    if(mp[pu].find(pv)==mp[pu].end()){
                        mp[pu].insert(pv);
                        freq[pv]++;
                    }
                }
            }
        }
        
        int ans=-1, maxsize=-1;
        for(int i=0;i<initial.size();i++){
            int pu=initial[i];
            set<int> st=mp[pu];
            set<int> :: iterator it;
            
            int total=0;
            for(it=st.begin();it!=st.end();it++){
                int pv=*it;
                if(freq[pv]==1){
                    total+=rk[pv]; // all groups which we can save
                }
            }
            if(total>=maxsize){
                if(total==maxsize){
                    ans=min(ans,pu);
                }else{
                    ans=pu;
                }
                maxsize=total;
            }
        }
        
        if(ans==-1) ans=*min_element(initial.begin(),initial.end());
        return ans;
    }
};
