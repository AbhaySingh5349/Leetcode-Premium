Question Link: https://leetcode.com/problems/minimize-malware-spread/


// Approach :                                            
class Solution {
public:
    
    int find(vector<int> &parent, int u){
        if(parent[u]==u) return u;
        return parent[u]=find(parent,parent[u]);
    }
    
    void merge(vector<int> &parent, vector<int> &rk, int pu, int pv){
        if(rk[pu]>=rk[pv]){
            rk[pu]+=rk[pv];
            rk[pv]=0;
            parent[pv]=pu;
        }else{
            rk[pv]+=rk[pu];
            rk[pu]=0;
            parent[pu]=pv;
        }
    }
    
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n=graph.size();
        vector<int> parent(n), rk(n);
        for(int i=0;i<n;i++){
            parent[i]=i;
            rk[i]=1;
        }
        
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(graph[i][j]==1){
                    int pu=find(parent,i), pv=find(parent,j);
                    if(pu!=pv) merge(parent,rk,pu,pv);
                }
            }
        }
        
        vector<int> freq(n,0);
        for(int i=0;i<initial.size();i++){
            int p=find(parent,initial[i]);
            freq[p]++;
        }
        
        int ans=-1, maxsize=-1;
        for(int i=0;i<initial.size();i++){
            int p=find(parent,initial[i]);
            
            // removing component with max. size & 1 infected node only
            if(freq[p]==1 && rk[p]>=maxsize){
                if(rk[p]==maxsize){
                    ans=min(ans,initial[i]);
                }else{
                    ans=initial[i];
                }
                maxsize=rk[p];
            }
        }
        if(ans==-1) ans=*min_element(initial.begin(),initial.end());
        return ans;
    }
};
